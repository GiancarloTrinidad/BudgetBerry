// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("DIRECT_URL")
  extensions = [pg_trgm, uuid_ossp]
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  name      String?
  
  wallets     Wallet[]
  goals       Goal[]
  transactions Transaction[]
}

model Wallet {
  id          String       @id @default(uuid())
  name        String       @default("Primary Wallet")
  totalAmount Float        @default(0.0)
  budget      Float        @default(0.0)
  color       String       @default("#3b82f6") // hex color
  
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  
  transactions Transaction[]
  goals        Goal[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Goal {
  id          String       @id @default(uuid())
  name        String
  targetAmount Float
  currentAmount Float      @default(0.0)
  targetDate  DateTime?
  isCompleted Boolean      @default(false)
  priority    String       @default("medium") // low, medium, high
  
  wallet      Wallet       @relation(fields: [walletId], references: [id])
  walletId    String
  
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  
  transactions Transaction[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Transaction {
  id          String      @id @default(uuid())
  amount      Float
  description String
  type        String      // income, expense, transfer, goal
  category    String
  notes       String?
  
  wallet      Wallet      @relation(fields: [walletId], references: [id])
  walletId    String
  
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  
  // Optional goal association
  goal        Goal?       @relation(fields: [goalId], references: [id])
  goalId      String?
  
  // For transfers between wallets
  linkedTransaction Transaction? @relation("TransactionLinks")
  linkedTransactionId String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([walletId])
  @@index([createdAt])
}